{"version":3,"sources":["service/api.js","components/Information.jsx","components/Form.jsx","components/Navbar.js","components/Weather.jsx","App.js","reportWebVitals.js","index.js"],"names":["getWeather","city","country","a","data","axios","get","process","useStyles","makeStyles","component","margin","container","display","row","padding","fontSize","letterSpacing","value","color","icon","marginRight","error","background","Information","classes","Container","Typography","className","Box","name","sys","main","temp","visibility","humidity","Date","sunrise","toLocaleTimeString","sunset","wind","speed","weather","clouds","all","useStyle","theme","root","spacing","Form","useState","setCity","setCountry","click","handleClick","setData","useEffect","then","response","weatherInfo","Grid","variant","style","p","TextField","label","fullWidth","inputProps","InputLabelProps","onChange","e","handleCityChange","target","handleCountryChange","Button","size","onClick","textTransform","borderRadius","flexGrow","menuButton","title","Navbar","AppBar","position","Toolbar","IconButton","edge","aria-label","marginTop","Weather","mx","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c9ae6b68.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst URL = \"http://api.openweathermap.org/data/2.5/weather\";\r\nconst API_KEY = process.env.REACT_APP_WEATHER_API;\r\n\r\nexport const getWeather = async (city, country) => {\r\n  const data = axios.get(\r\n    `${URL}?q=${city},${country}&appid=${API_KEY}&units=metric`\r\n  );\r\n  return data;\r\n};\r\n","import { Box, Container, makeStyles, Typography } from \"@material-ui/core\";\r\nimport LocationOnIcon from \"@material-ui/icons/LocationOn\";\r\nimport FlareIcon from \"@material-ui/icons/Flare\";\r\nimport OpacityIcon from \"@material-ui/icons/Opacity\";\r\nimport Brightness5Icon from \"@material-ui/icons/Brightness5\";\r\nimport Brightness6Icon from \"@material-ui/icons/Brightness6\";\r\nimport DehazeIcon from \"@material-ui/icons/Dehaze\";\r\nimport CloudIcon from \"@material-ui/icons/Cloud\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\nimport SpeedIcon from \"@material-ui/icons/Speed\";\r\n\r\nconst useStyles = makeStyles({\r\n  component: {\r\n    margin: \"30px 60px\",\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n  },\r\n  row: {\r\n    padding: 8,\r\n    fontSize: 18,\r\n    letterSpacing: 2,\r\n  },\r\n  value: {\r\n    color: \"#1500ff\",\r\n    fontSize: 20,\r\n  },\r\n  icon: {\r\n    color: \"red\",\r\n    marginRight: 15,\r\n    fontSize: 30,\r\n  },\r\n  error: {\r\n    background: \"red\",\r\n    color: \"#fff\",\r\n    margin: 50,\r\n    padding: 20,\r\n  },\r\n});\r\n\r\nconst Information = ({ data, city, country }) => {\r\n  const classes = useStyles();\r\n\r\n  const getCloudsData = (value) => {\r\n    if (value === 0) {\r\n      return \"Clear\";\r\n    } else if (value > 1 && value < 100) {\r\n      return \"Partially Cloudy\";\r\n    } else {\r\n      return \"Cloudy\";\r\n    }\r\n  };\r\n\r\n  return data && city && country ? (\r\n    <Container>\r\n      <Typography className={classes.row}>\r\n        <LocationOnIcon className={classes.icon} />\r\n        Location:{\" \"}\r\n        <Box className={classes.value} component=\"span\">\r\n          {data.name}, {data.sys.country}{\" \"}\r\n        </Box>\r\n      </Typography>\r\n\r\n      <Typography className={classes.row}>\r\n        <FlareIcon className={classes.icon} />\r\n        Temperature:{\" \"}\r\n        <Box className={classes.value} component=\"span\">\r\n          {data.main.temp}Â°C{\" \"}\r\n        </Box>\r\n      </Typography>\r\n\r\n      <Typography className={classes.row}>\r\n        <VisibilityIcon className={classes.icon} />\r\n        Visibility:{\" \"}\r\n        <Box className={classes.value} component=\"span\">\r\n          {data.visibility / 1000}\r\n          {\" Km\"}\r\n        </Box>\r\n      </Typography>\r\n\r\n      <Typography className={classes.row}>\r\n        <OpacityIcon className={classes.icon} />\r\n        Humidity:{\" \"}\r\n        <Box className={classes.value} component=\"span\">\r\n          {data.main.humidity}%{\" \"}\r\n        </Box>\r\n      </Typography>\r\n\r\n      <Typography className={classes.row}>\r\n        <Brightness5Icon className={classes.icon} />\r\n        Sun Rise:{\" \"}\r\n        <Box className={classes.value} component=\"span\">\r\n          {new Date(data.sys.sunrise * 1000).toLocaleTimeString()}{\" \"}\r\n        </Box>\r\n      </Typography>\r\n\r\n      <Typography className={classes.row}>\r\n        <Brightness6Icon className={classes.icon} />\r\n        Sun Set:{\" \"}\r\n        <Box className={classes.value} component=\"span\">\r\n          {new Date(data.sys.sunset * 1000).toLocaleTimeString()}{\" \"}\r\n        </Box>\r\n      </Typography>\r\n\r\n      <Typography className={classes.row}>\r\n        <SpeedIcon className={classes.icon} />\r\n        Wind Speed:{\" \"}\r\n        <Box className={classes.value} component=\"span\">\r\n          {data.wind.speed}\r\n          {\" Km/hr \"}\r\n        </Box>\r\n      </Typography>\r\n\r\n      <Typography className={classes.row}>\r\n        <DehazeIcon className={classes.icon} />\r\n        Condition:{\" \"}\r\n        <Box className={classes.value} component=\"span\">\r\n          {data.weather[0].main}{\" \"}\r\n        </Box>\r\n      </Typography>\r\n\r\n      <Typography className={classes.row}>\r\n        <CloudIcon className={classes.icon} />\r\n        Clouds:{\" \"}\r\n        <Box className={classes.value} component=\"span\">\r\n          {getCloudsData(data.clouds.all)}{\" \"}\r\n        </Box>\r\n      </Typography>\r\n    </Container>\r\n  ) : !(city && country) ? (\r\n    <Typography className={classes.error}>\r\n      Please Enter the Name of City and Country to check Weather\r\n    </Typography>\r\n  ) : (\r\n    \"\"\r\n  );\r\n};\r\n\r\nexport default Information;\r\n","import {\r\n  Button,\r\n  makeStyles,\r\n  TextField,\r\n  Typography,\r\n  Grid,\r\n} from \"@material-ui/core\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getWeather } from \"../service/api\";\r\nimport Information from \"./Information\";\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(2),\r\n      padding: theme.spacing(1),\r\n    },\r\n  },\r\n}));\r\n\r\nconst Form = () => {\r\n  const classes = useStyle();\r\n  const [city, setCity] = useState(\"\");\r\n  const [country, setCountry] = useState(\"\");\r\n  const [click, handleClick] = useState(false);\r\n  const [data, setData] = useState();\r\n\r\n  useEffect(() => {\r\n    const weatherInfo = async () => {\r\n      city &&\r\n        (await getWeather(city, country).then((response) => {\r\n          setData(response.data);\r\n        }));\r\n    };\r\n    weatherInfo();\r\n    handleClick(false);\r\n  }, [click]);\r\n\r\n  const handleCityChange = (city) => {\r\n    setCity(city);\r\n  };\r\n\r\n  const handleCountryChange = (country) => {\r\n    setCountry(country);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid container>\r\n        <Grid className={classes.root}>\r\n          <Grid>\r\n            <Typography variant=\"h4\" style={{ color: \"#343634\" }}>\r\n              Welcome to Weather App!!\r\n            </Typography>\r\n          </Grid>\r\n          <Grid p={200}>\r\n            <TextField\r\n              label=\"City\"\r\n              margin=\"normal\"\r\n              fullWidth=\"true\"\r\n              inputProps={{ style: { fontSize: 18 } }}\r\n              InputLabelProps={{ style: { fontSize: 18 } }}\r\n              onChange={(e) => handleCityChange(e.target.value)}\r\n            />\r\n          </Grid>\r\n          <Grid>\r\n            <TextField\r\n              label=\"Country\"\r\n              margin=\"normal\"\r\n              fullWidth=\"true\"\r\n              inputProps={{ style: { fontSize: 18 } }}\r\n              InputLabelProps={{ style: { fontSize: 18 } }}\r\n              onChange={(e) => handleCountryChange(e.target.value)}\r\n            />\r\n          </Grid>\r\n          <Grid>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              size=\"large\"\r\n              onClick={() => handleClick(true)}\r\n              style={{ textTransform: \"none\", borderRadius: 10 }}\r\n            >\r\n              Get Weather\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid>\r\n          <Information data={data} city={city} country={country} />\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function Navbar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" color=\"secondary\">\r\n        <Toolbar>\r\n          <IconButton\r\n            edge=\"start\"\r\n            className={classes.menuButton}\r\n            color=\"inherit\"\r\n            aria-label=\"menu\"\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Weather App\r\n          </Typography>\r\n          <IconButton color=\"inherit\">\r\n            <AccountCircle />\r\n          </IconButton>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n","import { Box, Container, makeStyles } from \"@material-ui/core\";\r\nimport Form from \"./Form\";\r\nimport Navbar from \"./Navbar\";\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    background: \"linear-gradient(to bottom , #00eaff, #e3ba40)\",\r\n    marginTop: \"5rem\",\r\n    borderRadius: \"2rem\",\r\n  },\r\n});\r\n\r\nconst Weather = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Box>\r\n      <Navbar />\r\n      <Box mx={2}>\r\n        <Container className={classes.container}>\r\n          <Form />\r\n        </Container>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Weather;\r\n","import Weather from \"./components/Weather\";\n\nfunction App() {\n  return <Weather />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}